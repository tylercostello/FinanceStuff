# This example algorithm uses the Relative Strength Index indicator as a buy/sell signal.
# When the RSI is over 70, a stock can be seen as overbought and it's time to sell.
# When the RSI is below 30, a stock can be seen as oversold and it's time to buy.

import talib
import numpy as np
import math

# Setup our variables
def initialize(context):
    set_slippage()
    context.max_notional = 100000
    context.SPXL = sid(37514)  # SPXL
    context.SPXS = sid(37083)  # SPXL
    context.LOW_MOMENTUM = -11
    context.HIGH_MOMENTUM = -11

    schedule_function(rebalance, date_rules.every_day(), time_rules.market_open())

def rebalance(context, data):

    #Get a trailing window of data
    prices = data.history(context.SPXL, 'price', 15, '1d')
    shortprices = data.history(context.SPXS, 'price', 15, '1d')
    # Use pandas dataframe.apply to get the last RSI value
    # for for each stock in our basket

    mlist=talib.MOM(prices, timeperiod=12)[-1]

    # Get our current positions
    positions = context.portfolio.positions

    # Until 14 time periods have gone by, the rsi value will be numpy.nan

    # RSI is above 70 and we own GOOG, time to close the position.
    if mlist < context.LOW_MOMENTUM and context.SPXL in positions:
        order_target(context.SPXL, 0)
        #order_target_value(context.SPXS, context.max_notional)

        # Check how many shares of Intel we currently own
        #current_SPXL_shares = positions[context.SPXL].amount
        #log.info('RSI is at ' + str(SPXL_rsi) + ', selling ' + str(current_intel_shares) + ' shares')

    # RSI is below 30 and we don't have any Intel stock, time to buy.
    elif mlist > context.HIGH_MOMENTUM and context.SPXL not in positions:
        order_target(context.SPXS, 0)
        o = order_target_value(context.SPXL, context.max_notional)
        #log.info('RSI is at ' + str(SPXL_rsi) + ', buying ' + str(get_order(o).amount)  + ' shares')

    # record the current RSI value and the current price of SPXL.
    record(SPXLM=mlist)
